name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        id: build
        run: |
          TAG=$(echo $GITHUB_SHA | cut -c1-7)
          echo "TAG=${TAG}" >> $GITHUB_ENV
          docker build -t ${{ secrets.DOCKER_USERNAME }}/image-fe:${TAG} -f Dockerfile .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: |
          TAG=${{ env.TAG }}
          echo "Pushing image with tag: ${TAG}"
          docker push ${{ secrets.DOCKER_USERNAME }}/image-fe:${TAG}

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Docker
        run: |
          docker --version
          docker-compose --version

      - name: Pull Docker Image
        run: |
          TAG=${{ env.TAG }}
          if [ -z "$TAG" ]; then TAG="latest"; fi
          echo "Pulling image with tag: ${TAG}"
          docker pull ${{ secrets.DOCKER_USERNAME }}/image-fe:${TAG}

      - name: Create docker-compose.yml
        run: |
          cat <<EOF > docker-compose.yml
          version: '3.8'
          services:
            fe:
              image: ${DOCKER_USERNAME}/image-fe:${TAG}
              ports:
                - '85:80'
              deploy:
                replicas: 3
                restart_policy:
                  condition: on-failure
                placement:
                  constraints:
                    - node.labels.role == worker
              networks:
                - frontend
                - backend
          networks:
            frontend:
              driver: overlay
            backend:
              driver: overlay
          EOF

      - name: Remove Old Stack
        run: |
          docker stack rm fe-app || true

      - name: Deploy New Stack
        run: |
          docker stack deploy -c docker-compose.yml fe-app

      - name: Verify Deployment
        run: |
          docker stack services fe-app
