name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Remove Old Image with Tag latest
        run: |
          echo "Removing old image with tag: latest"
          docker rmi ${{ secrets.DOCKER_USERNAME }}/image-fe:latest || true

      - name: Build Docker Image
        id: build
        run: |
          # TAG=${{ github.sha }}
          # echo "TAG=${TAG}" >> $GITHUB_ENV
          
          # Build image với tag từ commit hash
          # docker build -t ${{ secrets.DOCKER_USERNAME }}/image-fe:${TAG} -f Dockerfile .
          
          # Build image với tag latest
          docker build -t ${{ secrets.DOCKER_USERNAME }}/image-fe:latest -f Dockerfile .

      - name: Push Docker Image
        run: |
          # TAG=${{ env.TAG }}
          # echo "Pushing image with tag: ${TAG}"
          # docker push ${{ secrets.DOCKER_USERNAME }}/image-fe:${TAG}
          
          echo "Pushing image with tag: latest"
          docker push ${{ secrets.DOCKER_USERNAME }}/image-fe:latest

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test
  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Deploy via SSH
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          echo "${{ secrets.SSH_PASSWORD }}" | sudo -S -i << 'EOF'
            sudo -u vps1 -i << 'INNER_EOF'
              cd /home/vps1
              docker pull ${{ secrets.DOCKER_USERNAME }}/image-fe:latest
              # docker-compose down
              # docker-compose up -d
            INNER_EOF
          EOF

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Set up Docker
  #       run: |
  #         docker --version
  #         docker-compose --version

  #     - name: Pull Docker Image
  #       run: |
  #         echo "Pulling image with tag: latest"
  #         docker pull ${{ secrets.DOCKER_USERNAME }}/image-fe:latest

  #     - name: Create docker-compose.yml
  #       run: |
  #         cat <<EOF > docker-compose.yml
  #         version: '3.8'
  #         services:
  #           fe:
  #             image: ${DOCKER_USERNAME}/image-fe:latest
  #             ports:
  #               - '85:80'
  #             deploy:
  #               replicas: 3
  #               restart_policy:
  #                 condition: on-failure
  #               placement:
  #                 constraints:
  #                   - node.role == worker
  #             networks:
  #               - frontend
  #               - backend
  #         networks:
  #           frontend:
  #             driver: overlay
  #           backend:
  #             driver: overlay
  #         EOF

  #     - name: Remove Old Stack
  #       run: |
  #         docker stack rm fe-app || true

  #     - name: Deploy New Stack
  #       run: |
  #         docker stack deploy -c docker-compose.yml fe-app

  #     - name: Verify Deployment
  #       run: |
  #         docker stack services fe-app
