name: FE CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout FE Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build FE Docker Image
        id: build
        run: |
          TAG=$(echo $GITHUB_SHA | cut -c1-7)
          docker build -t ${{ secrets.DOCKER_USERNAME }}/image-fe:${TAG} -f Dockerfile .
          echo "TAG=${TAG}" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push FE Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/image-fe:${{ env.TAG }}
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout FE Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18' 

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test
  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout FE Code
        uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy to Server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
        run: |
            echo "$SSH_PASSWORD" | sshpass ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 -v $SSH_USER@$SERVER_IP << 'EOF'
            echo "SSH Connection Successful!"
            EOF
  
# deploy:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout FE Code
#         uses: actions/checkout@v3

#       - name: Install sshpass
#         run: sudo apt-get install -y sshpass

#       - name: Deploy to Server
#         # env:
#         #   SSH_USER: ${{ secrets.SSH_USER }}
#         #   SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
#         #   NGROK_ADDRESS: d15e-118-69-187-232.ngrok-free.app  # Ngrok address from the ngrok command output
#         #   NGROK_PORT: 22  # Ngrok port
#         #   DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#         #   TAG: ${{ env.TAG }}
#         run: |
#             # echo "$SSH_PASSWORD" | sshpass ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 -v $SSH_USER@$NGROK_ADDRESS -p $NGROK_PORT << EOF
#             # echo "$SSH_PASSWORD" | sudo -S -i
#             cd /home/vps1/demo-devops
#             ls demo-devops
#             # # Pull the latest Docker image
#             # docker pull $DOCKER_USERNAME/image-fe:${TAG}

#             # # Stop and remove the old container (if exists)
#             # docker stop demo-devops || true
#             # docker rm demo-devops || true

#             # # Run the new container
#             # docker run -d --name demo-devops -p 80:80 $DOCKER_USERNAME/image-fe:${TAG}
#             # EOF
#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Pull Docker Image
#         run: |
#           echo "Pulling Docker image from Docker Hub..."
#           docker pull ${{ secrets.DOCKER_USERNAME }}/image-fe:${{ env.TAG }}

#       - name: Stop and Remove Old Container
#         run: |
#           echo "Stopping and removing any existing container..."
#           docker stop frontend || true
#           docker rm frontend || true

#       - name: Run New Container
#         run: |
#           echo "Running new container..."
#           docker run -d --name frontend -p 85:80 ${{ secrets.DOCKER_USERNAME }}/image-fe:${{ env.TAG }}



 
        

    
 
  
